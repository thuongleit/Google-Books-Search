apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'jacoco'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'me.thuongle.googlebookssearch.testing.OpenClass'
}

jacoco {
    toolVersion = "0.8.1"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    def networkExecutorType = "me.thuongle.googlebookssearch.api.BookService.NetworkExecutorType.RETROFIT"

    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "me.thuongle.googlebookssearch"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "me.thuongle.googlebookssearch.api.BookService.NetworkExecutorType", "NETWORK_EXECUTOR_TYPE", networkExecutorType

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        androidTest.java.srcDirs += "src/sharedTest/java"
        test.java.srcDirs += "src/sharedTest/java"
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'

        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    //layout and views
    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support:recyclerview-v7:${versions.supportLibrary}"
    implementation "com.android.support:cardview-v7:${versions.supportLibrary}"
    implementation "com.android.support:design:${versions.supportLibrary}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    //ACCs
    implementation "android.arch.lifecycle:extensions:${versions.lifecycle}"
    kapt "android.arch.lifecycle:compiler:${versions.lifecycle}"

    //network and logging
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation 'com.google.code.gson:gson:2.8.5'

    //image tools
    implementation 'com.github.bumptech.glide:glide:4.8.0'

    //debug tools
    implementation 'com.jakewharton.timber:timber:4.5.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "android.arch.core:core-testing:${versions.lifecycle}"
    testImplementation "org.robolectric:robolectric:4.0.1"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${versions.espresso}"
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation "android.arch.core:core-testing:${versions.lifecycle}"
    androidTestImplementation "org.mockito:mockito-core:${versions.mockito}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"

    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
}
// we need all open to run tests in debug variant. UT in release variant will always fail
// disable check UT in release
project.tasks.whenTaskAdded {
    if (it.name == "compileReleaseUnitTestKotlin") {
        it.enabled = false
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
